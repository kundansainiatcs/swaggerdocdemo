openapi: 3.0.0
info:
  version: 1.0.4
  title: Book-Lifecycle-APIs
  description: This APIs manage all the different operations related to Book lifecycle
  contact:
    email: kundan.saini@gmail.com
tags:
  - name: Book Master
    description: Everything related to a book lifecycle
paths:
  /book:
    get:
      summary: Find all the books based on book status
      description: Status could be published unpublished discontinued
      operationId: findBooksByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter the books
          required: true
          schema:
            type: array
            items:
              type: string
              enum:
                - published
                - unpublished
                - discontinued
              default: published
      responses:
        '200':
          description: successfully able to fetch books with requested status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              examples:
                book:
                  $ref: '#/components/examples/Book'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Save a new book record into the database.
      operationId: saveBook
      requestBody:
        $ref: '#/components/requestBodies/Book'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'  
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/KUNDANSAINIPOC/Book-Lifecycle/1.0.1
components:
  ## Reusable Schemas/Models ##
  schemas:
    Book:
      description: This is the schema defination for book model
      type: object
      required:
        - isbnNumber
        - authorName
      properties:
        id:
          type: integer
          format: int64
          example: 12345
          readOnly: true
        name:
          type: string
          example: rich dad poor dad
        isbnNumber:
          type: string
          example: ABC123XY
        authorName:
          type: string
          example: Robert
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message      
  ## Reusable Examples Schemas/Models ##
  examples:
    Book:
      summary: example of book schema
      value:
       - id : 1
         name: rich dad poor dad
         isbnNumber: ABC123
         authorName: Robert
       - id : 2
         name: GITA
         isbnNumber: XYZ123
         authorName: Gopal Das
  ## Reusable Responses ##       
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: The server can not find the requested resource.  
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: The user is not authorized to access the requested resource.  
    BadRequest:
      description: Request is not correct
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: The request is not correct.
    Created:
      description: Data is successfully saved into the DB.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 201
            message: Record is successfully created into the DB. 
  # Reusable Request Body
  requestBodies:
    Book:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'
      description: Book object that needs to be added to the database.
      required: true
