openapi: 3.0.0
info:
  title: Book-Lifecycle-APIs
  description: This APIs manage all the different operations related to Book lifecycle
  contact:
    email: kundan.saini@gmail.com
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/KUNDANSAINIPOC/Book-Lifecycle/1.0.5
  description: SwaggerHub API Auto Mocking
tags:
- name: Book Master
  description: Everything related to a book lifecycle
paths:
  /book:
    get:
      summary: Find all the books based on book status
      description: Status could be published unpublished discontinued
      operationId: findBooksByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter the books
        required: true
        schema:
          type: array
          items:
            type: string
            enum:
            - published
            - unpublished
            - discontinued
          default: published
      responses:
        "200":
          description: successfully able to fetch books with requested status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              examples:
                book:
                  $ref: '#/components/examples/Book'
        "400":
          description: Request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: The request is not correct.
    post:
      summary: Save a new book record into the database.
      operationId: saveBook
      requestBody:
        $ref: '#/components/requestBodies/Book'
      responses:
        "201":
          description: Data is successfully saved into the DB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 201
                message: Record is successfully created into the DB.
        "400":
          description: Request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: The request is not correct.
components:
  schemas:
    Book:
      required:
      - authorName
      - isbnNumber
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 12345
        name:
          type: string
          example: rich dad poor dad
        isbnNumber:
          type: string
          example: ABC123XY
        authorName:
          type: string
          example: Robert
      description: This is the schema defination for book model
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
  responses:
    BadRequest:
      description: Request is not correct
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: The request is not correct.
    Created:
      description: Data is successfully saved into the DB.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 201
            message: Record is successfully created into the DB.
  parameters:
    bookstatus:
      name: status
      in: query
      description: Status values that need to be considered for filter the books
      required: true
      schema:
        type: array
        items:
          type: string
          enum:
          - published
          - unpublished
          - discontinued
        default: published
  examples:
    Book:
      summary: example of book schema
      value:
      - id: 1
        name: rich dad poor dad
        isbnNumber: ABC123
        authorName: Robert
      - id: 2
        name: GITA
        isbnNumber: XYZ123
        authorName: Gopal Das
  requestBodies:
    Book:
      description: Book object that needs to be added to the database.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'
      required: true
